3-1 存储管理的主要模式
逻辑地址：相对地址，用户编程所使用的地址空间
逻辑地址从0开始编号：一位逻辑地址和二维逻辑地址
 
段式程序设计
把一个程序设计成多个段
用户可以用段覆盖技术扩充内存空间使用量
 
主存储器的复用
多道程序设计需要复用主存
按分区复用
按页架复用
 
 
3-2 存储管理的功能
1 地址转换（重定位）
把逻辑地址转换成绝对地址
静态重定位：在程序装入内存时进行地址转换
动态重定位：在CPU执行程序时进行地址转换
2 分配与去配
3 共享
多个进程共享主存储器资源
多个进程共享主存储器的某些区域
4 存储保护
避免主存中的多个进程互相干扰
私有主存区中的信息：可读可写
公共区中的共享信息：根据授权
非本进程信息：不可读写
 
主存储器空间的扩充
存储扩充：把磁盘作为主存扩充，只把部分进程或进程的部分内容装入内存
对换技术：把部分不运行的进程调出
虚拟技术：只调入进程的部分内容
 
3-3 虚拟存储器
用户编程行为分析：
全面考虑各种情况，执行时有互斥性
顺序性和循环性等空间局部性行为
某一阶段执行的时间局部性行为
 
可以考虑部分调入进程内容：
存储管理把进程全部信息放在辅存中，执行时先将其中一部分装入主存，随用随调入
如果主存中没有足够的空闲空间，存储管理需要根据执行行为把主存中暂时不用的信息调出到辅存
 
两个地址空间：
（辅存）虚拟地址空间：承载进程装入
（主存）实际地址空间：容纳进程运行
 
3-4 存储器的组织层次
 
 
3-5 固定分区存储管理
支持多个分区
分区数量固定
分区大小固定
 
不适应大尺寸程序，又存在内存内零头
 
3-6 可变分区存储管理
按进程的内存需求动态划分分区
分区数量不固定
分区大小不固定
 
创建一个进程时，根据进程所需的主存量，查看主存中是否有足够的连续空闲空间】
若有，则按需要量分割一个分区
若无，则令该进程等待主存资源
 
采用链表实现主存分配表（已分配区表、未分配区表）
（分区数量不固定）
 
内存回收可能导致分区的调整（未分配区合并）
 
会产生小的不可用的内存分区，即内存外零头，且无法避免
解决方案：
移动技术
 
 
3-7 页式存储管理
分页存储器将主存划分成多个大小相等的页架
受页架尺寸限制，程序的逻辑地址自然分成页
不同的页可放在不同页架中，不需要连续
 
逻辑地址形式：页号+单元号
物理（绝对）地址形式：页架号+单元号
地址转换：查页表
 
 
页的共享
数据共享：不同进程可以使用不同页号
程序共享：不同进程必须使用相同页号
 
快表：
设置一个专用cache，存放页表的一部分
联想存储器，按内容寻址
 
基于快表的地址转换流程：
1 按逻辑地址中的页号查快表
2 若已在快表，由页架号和单元号形成绝对地址；
   若不在快表，再查主存页表形成绝对地址，将该页登记到快表中
3 当快表填满，又要登记新页，按一定策略淘汰一个旧登记项
 
E.g. 假定主存访问时间为200毫微秒，快表访问时间为40毫微秒，查快表的命中率为90自己%
平均地址转换代价
（200 + 40）* 90% + （200 + 200）* 10% = 256 毫微秒
 
 
3-9 页式虚拟存储管理
把进程全部页面装入虚拟存储器，执行时先把部分页面装入实际内存，根据执行行为，动态调入不在主存的页，同时进行必要的页面调出
主流存储管理技术
 
首次只把进程第一页装入主存-》请求页式存储管理
 
实现：
若页在内存中，则获得块号形成绝对地址
若页不在内存，则CPU发出缺页中断
 
 
3-10 页面调度
选择淘汰页的工作：页面调度
页面调度算法如果设计不当，会出现抖动或颠簸（刚被淘汰的页面又要调入内存）
 
假定进程p运行中成功访问次数为s，不成功访问次数为f
缺页中断率=f/(f + s)
衡量存储管理性能和用户编程水平的重要依据
 
影响缺页中断率的因素：
1 分配给进程的页架数：-
2 页面的大小：-
3 用户的程序编制方法
 
 
页面调度算法
1 FIFO
只考虑了程序的顺序性，没有考虑程序的循环性
2 LRU
模拟实现：
每页建一个引用标志，供硬件使用
设置一个时间间隔中断：中断时页引用标志置0
地址转换时，页引用标志置1
淘汰页面时，从页引用标志为0的页中间随机选择
3 LFU
4 CLOCK
页面调入主存或访问主存页面时，引用标志位置1
淘汰页面时，从指针当前指向的页面开始扫描循环队列
把所遇到的引用标志位是1的页面的引用标志位置0，并跳过
把所遇到的引用标志位是0的页面淘汰，指针推进一步
 
3-11 反置页表
按页架号做索引，记录进程号和页号
完成逻辑地址到物理地址的转换
 
哈希表的key为h(进程标识,页号),value为链表
遍历链表，寻找相应的进程号和页号
若找到，则生成物理地址；反之，缺页中断
 
3-12 段式存储管理
基于可变分区存储管理实现，一个进程要占用多个分区
段址+单元号
对用户不透明（用户可见）
 
 
3-13 段式虚拟存储管理
把进程的所有分段存放在辅存中，进程运行时先把当前需要的一段或几段装入主存。在执行过程中访问到不在主存的段时再把它们动态装入
对用户透明
 
 
3-14 段页式存储管理
段式存储管理基于页式存储管理实现
每一段不必占用连续的存储空间，可存放在不连续的主存页架中
 
 
段页式虚拟存储管理
 
 

