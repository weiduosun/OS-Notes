2-12 多线程
单线程结构进程：
 
 
在并发程序设计上的问题：
进程切换开销大
进程通信开销大
限制进程并发的粒度
降低并行计算的效率
 
多线程结构进程：
 
 
进程是操作系统中进行保护和资源分配的独立单位：
用来容纳进程映像的虚拟地址空间
对进程、文件和设备的存取保护机制
 
同一个进程中的所有线程共享进程获得的主存空间和资源：
线程执行状态
受保护的线程上下文
独立的程序指令计数器
执行堆栈
容纳局部变量的静态存储器
 
线程状态有运行、就绪和睡眠
 
操作系统感知线程的环境下：处理器调度的对象是线程
不：进程
 
并发多线程程序的优点：
1 快速线程切换
2 减少管理开销
3 通信易于实现
4 并行程度提高
5 节省内存空间
 
多线程的应用：
前台和后台
c/s模式
加快执行速度
设计用户接口
 
2-13 klt和ult
内核级线程klt：线程管理的所有工作由操作系统内核来做
特点：
进程中的一个线程被阻塞，内核能调度同一进程的其他线程占有处理器运行
多处理器环境中，内核能同时调度同一进程中多个线程并行执行
内核自身也可用多线程技术实现，提高操作系统的执行速度和效率
应用程序线程在用户态运行，线程调度和管理在内核实现。在同一进程中，控制权从一个线程传送到另一个线程需要模式切换，系统开销大
 
用户级线程ult: 用户空间运行的线程库，提供多线程应用程序的开发和运行
特点：
不需要内核模式
允许进程按应用特定需要选择调度算法
能运行在任何操作系统上
仅有一个ult能够执行
一个ult的阻塞，将引起整个进程的阻塞
 
Jacketing技术：
把阻塞式系统调用改造成非阻塞式
当线程陷入系统调用时，执行jacketing
Jacketing 检查资源使用情况，决定是否执行进程切换或传递控制权给另一个线程
 
 
 
用户级线程：逻辑并行
内核级线程：物理并行
 
多线程实现的混合策略
 
多线程实现混合式策略的特点：
线程创建在用户空间中完成，线程的调度和同步也在应用程序中进行
一个应用中的多个用户级线程被映射到一些内核级线程上
 
 
只有ult的活跃态对应了klt的三态

